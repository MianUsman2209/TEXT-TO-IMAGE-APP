# -*- coding: utf-8 -*-
"""Text_Image_Model_public model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YL6KBLix3-SqN7X4qeW_5dEGie7oOsB4

This line installs the "diffusers" library using pip.
Diffusers is a library from Hugging Face used for working with diffusion models, which are a type of generative model for creating new data.
"""

!pip install diffusers

"""This line installs the "transformers" library using pip.
Transformers are a type of neural network architecture commonly used for natural language processing tasks.
https://huggingface.co/docs/transformers/index
"""

!pip install transformers

"""


This line installs the "accelerate" library using pip.
Accelerate is a library that helps improve training speed and performance by utilizing multiple GPUs or TPUs.
"""

!pip install accelerate

"""This link is about text-to-image generation with Hugging Face's Diffusers. It discusses different text-to-image models and how to use them. The article also details how to configure these models to generate different creative outputs.
https://huggingface.co/docs/diffusers/using-diffusers/conditional_image_generation
"""

# Import the diffusers library
import diffusers

# Import the torch library
import torch

# This line loads the DiffusionPipeline class from the diffusers library.
# Diffusion pipelines are a convenient way to use pre-trained diffusion models for image generation
from diffusers import DiffusionPipeline

# This line loads a pre-trained diffusion model called "runwayml/stable-diffusion-v1-5" from the Hugging Face Hub
# Stable diffusion models are a type of generative model that can create new images from text descriptions
generator = DiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5")

# This line moves the generator model to the CUDA device (GPU) if available
# This can significantly improve the speed of image generation compared to using the CPU
generator.to("cuda")

# This line generates an image using the text prompt
# The generator.images[0] part retrieves the first generated image from the pipeline's output
image = generator("Show the car with accident").images[0]
image